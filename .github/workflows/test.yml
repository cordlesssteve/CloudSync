name: CloudSync CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run shellcheck on shell scripts
      run: |
        find . -name "*.sh" -type f -exec shellcheck {} +

    - name: Check script permissions
      run: |
        find scripts -name "*.sh" -type f ! -executable -exec echo "Missing execute permission: {}" \; -exec false {} +

    - name: Validate JSON files
      run: |
        find . -name "*.json" -type f -exec echo "Validating {}" \; -exec jq empty {} \;

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          bc \
          inotify-tools \
          curl \
          timeout

    - name: Setup test environment
      run: |
        mkdir -p ~/.cloudsync
        mkdir -p ~/.config/rclone

    - name: Create test rclone config
      run: |
        cat > ~/.config/rclone/rclone.conf << 'EOF'
        [test-cloudsync]
        type = local
        EOF

    - name: Run unit tests
      run: |
        chmod +x tests/test-runner.sh
        ./tests/test-runner.sh unit --verbose --report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: ~/.cloudsync/test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        test-suite: [sync-operations, monitoring, performance]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          bc \
          inotify-tools \
          curl \
          timeout

    - name: Setup test environment
      run: |
        mkdir -p ~/.cloudsync
        mkdir -p ~/.config/rclone

    - name: Create test rclone config
      run: |
        cat > ~/.config/rclone/rclone.conf << 'EOF'
        [test-cloudsync]
        type = local
        EOF

    - name: Run integration tests
      run: |
        chmod +x tests/test-runner.sh
        ./tests/test-runner.sh integration --verbose --report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ matrix.test-suite }}
        path: ~/.cloudsync/test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          bc \
          inotify-tools \
          curl \
          timeout

    - name: Setup test environment
      run: |
        mkdir -p ~/.cloudsync
        mkdir -p ~/.config/rclone

    - name: Create test rclone config
      run: |
        cat > ~/.config/rclone/rclone.conf << 'EOF'
        [test-cloudsync]
        type = local
        EOF

    - name: Run performance tests
      run: |
        chmod +x tests/test-runner.sh
        ./tests/test-runner.sh performance --verbose --report --timeout 900

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: ~/.cloudsync/test-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          bc \
          inotify-tools

    - name: Run security tests
      run: |
        chmod +x tests/test-runner.sh
        ./tests/test-runner.sh security --verbose --report

    - name: Check for secrets in code
      run: |
        if grep -r -E "(password|secret|key|token)\s*=" scripts/ config/ || \
           grep -r -E "-----BEGIN.*PRIVATE KEY-----" . || \
           grep -r -E "[A-Za-z0-9+/]{40,}" scripts/ config/; then
          echo "Potential secrets found in code!"
          exit 1
        fi

    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: ~/.cloudsync/test-results/

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required documentation
      run: |
        required_docs=(
          "README.md"
          "CURRENT_STATUS.md"
          "ACTIVE_PLAN.md"
          "docs/reference/01-architecture/system-overview.md"
          "docs/reference/03-development/setup-guide.md"
        )

        for doc in "${required_docs[@]}"; do
          if [[ ! -f "$doc" ]]; then
            echo "Missing required documentation: $doc"
            exit 1
          fi
        done

    - name: Check documentation freshness
      run: |
        # Check if CURRENT_STATUS.md was updated recently (within 30 days)
        if [[ -f "CURRENT_STATUS.md" ]]; then
          last_modified=$(stat -c %Y "CURRENT_STATUS.md")
          current_time=$(date +%s)
          age_days=$(( (current_time - last_modified) / 86400 ))

          if [[ $age_days -gt 30 ]]; then
            echo "Warning: CURRENT_STATUS.md is $age_days days old"
          fi
        fi

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          bc \
          inotify-tools \
          curl \
          timeout \
          nodejs \
          npm

    - name: Setup test environment
      run: |
        mkdir -p ~/.cloudsync
        mkdir -p ~/.config/rclone

    - name: Create test rclone config
      run: |
        cat > ~/.config/rclone/rclone.conf << 'EOF'
        [test-cloudsync]
        type = local
        EOF

    - name: Install dashboard dependencies
      run: |
        cd dashboard && npm install

    - name: Run end-to-end tests
      run: |
        chmod +x tests/test-runner.sh
        ./tests/test-runner.sh end-to-end --verbose --report

    - name: Upload e2e test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: ~/.cloudsync/test-results/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, end-to-end-tests]
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Generate test summary
      run: |
        echo "# CloudSync Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "" >> test-summary.md

        total_tests=0
        passed_tests=0
        failed_tests=0

        for result_dir in test-results/*/; do
          if [[ -f "$result_dir/test-report-"*.json ]]; then
            report_file=$(ls "$result_dir"/test-report-*.json | head -n1)
            suite_name=$(basename "$result_dir")

            suite_total=$(jq -r '.summary.total_tests' "$report_file" 2>/dev/null || echo "0")
            suite_passed=$(jq -r '.summary.passed' "$report_file" 2>/dev/null || echo "0")
            suite_failed=$(jq -r '.summary.failed' "$report_file" 2>/dev/null || echo "0")
            suite_success_rate=$(jq -r '.summary.success_rate' "$report_file" 2>/dev/null || echo "0")

            echo "- **$suite_name**: $suite_passed/$suite_total passed (${suite_success_rate}%)" >> test-summary.md

            total_tests=$((total_tests + suite_total))
            passed_tests=$((passed_tests + suite_passed))
            failed_tests=$((failed_tests + suite_failed))
          fi
        done

        overall_success_rate=0
        if [[ $total_tests -gt 0 ]]; then
          overall_success_rate=$(echo "scale=1; $passed_tests * 100 / $total_tests" | bc -l)
        fi

        echo "" >> test-summary.md
        echo "## Overall Results" >> test-summary.md
        echo "- **Total Tests**: $total_tests" >> test-summary.md
        echo "- **Passed**: $passed_tests" >> test-summary.md
        echo "- **Failed**: $failed_tests" >> test-summary.md
        echo "- **Success Rate**: ${overall_success_rate}%" >> test-summary.md

        cat test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, end-to-end-tests]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
    - name: Create failure notification
      run: |
        echo "CloudSync CI/CD Pipeline failed on main branch"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Please check the test results and fix any failing tests."